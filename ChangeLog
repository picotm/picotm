
picotm 0.12.0 (2018-04-27)
-------------

    * Optional modules: Modules can now be disabled at compile time.
      With this change, platforms that don't provide all of the required
      features can still be supported to some extend. Users can also
      disable a module and provide an alternative implementation instead.
      By default, all modules are enabled.

    * Transaction-aware signal handling: The new signal component of the
      libc module adds support for Unix signals. Transactions that receive
      a signal will jump to recovery. With this new feature application
      errors, such as segmenation faults or divisions by zero, can be
      handled in a coordinated way.

    * Errors during casts or arithmetic operations are now recoverable.

    * The license of the libc module's fileid.{c,h} has been fixed to MIT.

    * Improved documentation.

    * Bug fix: Generator scripts for the release tarball now create a
      buildable package.


picotm 0.11.0 (2018-02-27)
-------------

    * Cate: Cate is now the official mascot of the picotm project.

    * Safe type casting: The type-casting module provides safe type casting
      between C types. Overflows and underflows of the destination type's
      range result in a rollback of the transaction.

    * Safe arithmetics: The arithmetics module provides safe addition,
      subtraction, multiplication and division for C types. Overflows,
      underflows or division-by-zero errors result in the rollback of
      the transaction.

    * Reworked module interface: The new module interface allows for better
      sharing of a module's call-back function. Further led to cleanups of
      internal data structures and a reduced size of the log entries.

    * Improved documentation

    * Bug fix: Doxygen now generates the documentation for errors involving
               `kern_return_t` Mac OS correctly. (#239)

    * Bug fix: Fix memory handling in the TM module that resulted in
               inconsistent commits. (#240, #241)


picotm 0.10.0 (2018-01-27)
-------------

    * Single-byte Transactional Memory. The TM module now maintains state
      for each individual byte. Previous versions only operated on complete
      memory words. The new feature avoids problems with dynamic memory and
      false positives by memory checkers.

    * TM-buffer discards: Transactional memory buffers can now be discarded
      when they are freed. This improves the performance of free_tx() and
      similar functions.

    * Valgrind-instrumented test cases. In addition to regular testing, all
      single-threaded test cases now run under Valgrind.

    * Tests for math error. Many tests have been added to test the error
      detection in the libm module.

    * Transactional txlib-entry initialization. Entries for txlib data
      structures can now be initialized from within transactions; hence
      simplifying the use of the data structure in general.

    * Redesigned event log.

    * Improved portability of Autoconf scripts.

    * Bug fix: Restore shared libraries (#219)

    * Bug fix: Fix test for libc (#220, #236)

    * Bug fix: Release old memory buffers in realloc_tx() (#224)

    * Bug fix: Release OFD transactions at transaction end (#227)


picotm 0.9.0 (2017-12-26)
------------

    * Added support for MacOS X, Windows and FreeBSD. Picotm now supports
      MacOS X and FreeBSD natively. Windows is supported through the Cygwin
      compatibility layer.

    * Added feature-test macros. Presence of transactional interfaces for
      system libraries is now announce at build time by C pre-processor macros.
      Test for PICOTM_<module>_HAVE_<interface> to be defined to 1.

    * Added test cases for math functions. All functions in the libm module
      now have at least one test case.

    * Bug fix: Don't free alloca()-allocated memory. (#173)

    * Bug fix: Decode 'mode_t' as int when used in varargs. (#182)

    * Bug fix: Don't roll-back twice during recovery. (#208)

    * Bug fix: Don't roll-back when saving FPU exception flags. (#212)


picotm 0.8.0 (2017-11-27)
------------

    * New transactional data structures. Picotm now supports transactional
      lists, multisets, queues and stacks. Operation on these data structures
      provide concurrency control and error detection, and integrate with the
      transaction manager.

    * Unused functions and static variables can now be removed during the
      link step. This can greatly reduce the size of statically linked
      executables.

    * Bug fix: Failure to initialize a transaction will now be handled
      correctly by starting error recovery. (#139)

    * Bug fix: Irrevocability state is released exactly once during a roll
      back of the transaction. (#160)


picotm 0.7.0 (2017-10-27)
------------

    * Added lock manager. The lock manager maintains R/W locks, resolves
      conflicts and schedules locks to transactions. Different scheduling
      strategies and irrevocability are supported.

    * The number of retries per transaction is now limited. This change
      results in more predictable transaction scheduling and higher
      throughput.

    * Transactional Memory module now uses picotm's R/W lock. This change
      integrates TM into the overall locking code

    * Individual test cases for each module. The test cases have been split
      up and moved to their respective module. Test infrstructure is shared
      among them.

    * Bug fix: getcwd_tx() now appends the correct command to the transaction
      log. (#150)

    * Bug fix: open_tx() now works correctly with relative paths (#151)


picotm 0.6.0 (2017-09-29)
------------

    * Added transactional sprintf() and sscanf() functions.

    * chdir_tx() now reports errors during roll-backs.

    * Added restart statistics. Call picotm_number_of_restarts() to
      retrieve the number of restarts performed by the local thread's
      last transaction. This functionality is helpful for benchmarking
      and performance analysis.

    * Added, reworked and cleaned up module tests. The tests result are
      returned in TAP format for easy integration into test harnesses.

    * Merge module tests into picotm package. Type `make check' to run
      all tests on your local machine.


picotm 0.5.0 (2017-08-29)
------------

    * Library versioning is now supported by libpicotm.so and its
      modules.

    * Improved internal error handling. All calls to abort() have been
      replaced with (non-)recoverable error handling; resulting in better
      support for fail-safe systems.

    * File-descriptor support has been reworked and cleaned up. There are
      now seprarate data structures for different file types and open file
      descriptions. Non-transactional corner cases are detected and reported.

    * A data structure for shared reference-counted objects has been added
      to the module library.

    * The GNU and POSIX variants of strerror_r() are now supported.


picotm 0.4.0 (2017-07-31)
------------

    * The package now builds in C11 mode by default. C11 is a minimum
      requirement. Gcc 4.8 to 7.1 and clang 4.0 should be compatible.

    * The module library now contains support for reference counters,
      R/W locks and thread-local R/W state, shared and thread-local tree
      maps, and container structures.

    * Cleaned up R/W state maps and R/W lock maps in fd module.

    * The file-descriptor table is now protected by transactional data
      structures.

    * The vfs module has been merged into the fd module.

    * Internal cleanups.

    * Bug: Fixed offsets of file-buffer record locks. (#67)

    * Bug: Add lost support for directories (#79)

    * Bug: Add missing break statements in fcntl() code (#83)


picotm 0.3.0 (2017-06-27)
------------

    * Relicensed source code under MIT license. The new license will
      simplify inclusion of picotm into other software.

    * All transactional interfaces now report errors to the picotm
      framework. No error codes are returned to the execution phase on
      failure.

    * Fixed bug where closing a file descriptor did not work reliably.

    * Added module library with code for table and arrays. The table
      helpers were available before, the array helper have been added
      from module-internal helper code. All modules have been converted
      to the new helpers.

    * Switched to C11 atomic operations.

    * Internal cleanups.


picotm 0.2.0 (2017-05-31)
------------

    * Improved source code documentation. The documentation is part of
      the source code and can be extracted using 'make doc'. There's a
      tutorial for each module and the overall library.

    * Improved error handling. Errors used to be signalled by returning
      an error code from the failed function. This scheme has been replaced
      in many places by an additional output parameter of type
      |struct picotm_error|. The stored value signals an error, which type
      of error, which error, and maybe an additional error message.

    * Updated module interface. The module interface has been changed to
      use |struct picotm_error| for signalling errors to picotm. Two new
      call-back functions apply() and undo() allow for performing module-
      wide apply and undo during commit or rollback of a transaction.


picotm 0.1.0 (2017-04-29)
------------

    * Added new paradigm for error handling. The original error handling
      had to be provided by the user and was split between execution and
      commit phase of the transaction. Under the new paradigm, the error
      detection and recovery is provided by picotm. Users most only provide
      fall-back code when recovery fails.

    * Cleaned up and restructured existing source code. All code is now
      self-contained without dependencies on external compiler tools,
      besides the GNU toolchain.

    * Restored modules for memory allocation, file-descriptor I/O, VFS,
      math, and helper functions from libc.

    * Added module for Software Transactional Memory. The old STM was
      a fork of TinySTM, which also served as TM.

    * Added core transaction manager. The new TM provides an updated
      public interface and from-scratch implementation.

    * Moved tests into separate package.

    * Added build system based on GNU autotools

    * Licensed all source code under the Mozilla Public License, v. 2.0
