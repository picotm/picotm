
picotm 0.6.0 (2017-09-29)
------------

    * Added transactional sprintf() and sscanf() functions.

    * chdir_tx() now reports errors during roll-backs.

    * Added restart statistics. Call picotm_number_of_restarts() to
      retrieve the number of restarts performed by the local thread's
      last transaction. This functionality is helpful for benchmarking
      and performance analysis.

    * Added, reworked and cleaned up module tests. The tests result are
      returned in TAP format for easy integration into test harnesses.

    * Merge module tests into picotm package. Type `make check' to run
      all tests on your local machine.


picotm 0.5.0 (2017-08-29)
------------

    * Library versioning is now supported by libpicotm.so and its
      modules.

    * Improved internal error handling. All calls to abort() have been
      replaced with (non-)recoverable error handling; resulting in better
      support for fail-safe systems.

    * File-descriptor support has been reworked and cleaned up. There are
      now seprarate data structures for different file types and open file
      descriptions. Non-transactional corner cases are detected and reported.

    * A data structure for shared reference-counted objects has been added
      to the module library.

    * The GNU and POSIX variants of strerror_r() are now supported.


picotm 0.4.0 (2017-07-31)
------------

    * The package now builds in C11 mode by default. C11 is a minimum
      requirement. Gcc 4.8 to 7.1 and clang 4.0 should be compatible.

    * The module library now contains support for reference counters,
      R/W locks and thread-local R/W state, shared and thread-local tree
      maps, and container structures.

    * Cleaned up R/W state maps and R/W lock maps in fd module.

    * The file-descriptor table is now protected by transactional data
      structures.

    * The vfs module has been merged into the fd module.

    * Internal cleanups.

    * Bug: Fixed offsets of file-buffer record locks. (#67)

    * Bug: Add lost support for directories (#79)

    * Bug: Add missing break statements in fcntl() code (#83)


picotm 0.3.0 (2017-06-27)
------------

    * Relicensed source code under MIT license. The new license will
      simplify inclusion of picotm into other software.

    * All transactional interfaces now report errors to the picotm
      framework. No error codes are returned to the execution phase on
      failure.

    * Fixed bug where closing a file descriptor did not work reliably.

    * Added module library with code for table and arrays. The table
      helpers were available before, the array helper have been added
      from module-internal helper code. All modules have been converted
      to the new helpers.

    * Switched to C11 atomic operations.

    * Internal cleanups.


picotm 0.2.0 (2017-05-31)
------------

    * Improved source code documentation. The documentation is part of
      the source code and can be extracted using 'make doc'. There's a
      tutorial for each module and the overall library.

    * Improved error handling. Errors used to be signalled by returning
      an error code from the failed function. This scheme has been replaced
      in many places by an additional output parameter of type
      |struct picotm_error|. The stored value signals an error, which type
      of error, which error, and maybe an additional error message.

    * Updated module interface. The module interface has been changed to
      use |struct picotm_error| for signalling errors to picotm. Two new
      call-back functions apply() and undo() allow for performing module-
      wide apply and undo during commit or rollback of a transaction.


picotm 0.1.0 (2017-04-29)
------------

    * Added new paradigm for error handling. The original error handling
      had to be provided by the user and was split between execution and
      commit phase of the transaction. Under the new paradigm, the error
      detection and recovery is provided by picotm. Users most only provide
      fall-back code when recovery fails.

    * Cleaned up and restructured existing source code. All code is now
      self-contained without dependencies on external compiler tools,
      besides the GNU toolchain.

    * Restored modules for memory allocation, file-descriptor I/O, VFS,
      math, and helper functions from libc.

    * Added module for Software Transactional Memory. The old STM was
      a fork of TinySTM, which also served as TM.

    * Added core transaction manager. The new TM provides an updated
      public interface and from-scratch implementation.

    * Moved tests into separate package.

    * Added build system based on GNU autotools

    * Licensed all source code under the Mozilla Public License, v. 2.0
